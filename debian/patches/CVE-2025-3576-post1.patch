From: Greg Hudson <ghudson@mit.edu>
Date: Wed, 14 Dec 2022 13:20:46 -0500
Subject: [PATCH] In KDC, assume all services support aes256-sha1

To facilitate negotiating session keys with acceptable security,
assume that services support aes256-cts-hmac-sha1 unless a
session_enctypes string attribute says otherwise.

ticket: 9075
origin: backport, https://github.com/krb5/krb5/commit/2cbd847e0e92bc4e219b65c770ae33f851b22afc
---
 src/kdc/kdc_util.c         | 4 ++++
 src/tests/t_keyrollover.py | 6 +++---
 2 files changed, 7 insertions(+), 3 deletions(-)

Index: krb5-1.19.2/src/kdc/kdc_util.c
===================================================================
--- krb5-1.19.2.orig/src/kdc/kdc_util.c
+++ krb5-1.19.2/src/kdc/kdc_util.c
@@ -929,6 +929,10 @@ dbentry_supports_enctype(kdc_realm_t *kd
     free(etypes_str);
     free(etypes);
 
+    /* Assume every server without a session_enctypes attribute supports
+     * aes256-cts-hmac-sha1-96. */
+    if (enctype == ENCTYPE_AES256_CTS_HMAC_SHA1_96)
+        return TRUE;
     /* Assume the server supports any enctype it has a long-term key for. */
     return !krb5_dbe_find_enctype(kdc_context, server, enctype, -1, 0, &datap);
 }
Index: krb5-1.19.2/src/tests/t_keyrollover.py
===================================================================
--- krb5-1.19.2.orig/src/tests/t_keyrollover.py
+++ krb5-1.19.2/src/tests/t_keyrollover.py
@@ -22,9 +22,9 @@ realm.run([kvno, princ1])
 realm.run([kadminl, 'purgekeys', realm.krbtgt_princ])
 # Make sure an old TGT fails after purging old TGS key.
 realm.run([kvno, princ2], expected_code=1)
-et = "aes128-cts-hmac-sha256-128"
-msg = 'krbtgt/%s@%s\n\tEtype (skey, tkt): %s, %s' % \
-    (realm.realm, realm.realm, et, et)
+msg = 'krbtgt/%s@%s\n\tEtype (skey, tkt): ' \
+    'aes256-cts-hmac-sha1-96, aes128-cts-hmac-sha256-128' % \
+    (realm.realm, realm.realm)
 realm.run([klist, '-e'], expected_msg=msg)
 
 # Check that new key actually works.
